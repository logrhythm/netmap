diff --git a/stmmac/stmmac_main.c b/stmmac/stmmac_main.c
index e3f6389e1b01..303d9f03a985 100644
--- a/stmmac/stmmac_main.c
+++ b/stmmac/stmmac_main.c
@@ -121,6 +121,9 @@ static void stmmac_exit_fs(struct net_device *dev);
 
 #define STMMAC_COAL_TIMER(x) (jiffies + usecs_to_jiffies(x))
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE)
+#include <if_stmmac_netmap_linux.h>
+#endif
 /**
  * stmmac_verify_args - verify the driver parameters.
  * Description: it checks the driver parameters and set a default in case of
@@ -474,7 +477,7 @@ static int stmmac_hwtstamp_ioctl(struct net_device *dev, struct ifreq *ifr)
 			/* PTP v1, UDP, any kind of event packet */
 			config.rx_filter = HWTSTAMP_FILTER_PTP_V1_L4_EVENT;
 			/* take time stamp for all event messages */
-			snap_type_sel = PTP_TCR_SNAPTYPSEL_1;
+			snap_type_sel = 0xFFFFFFFF & PTP_TCR_SNAPTYPSEL_1;
 
 			ptp_over_ipv4_udp = PTP_TCR_TSIPV4ENA;
 			ptp_over_ipv6_udp = PTP_TCR_TSIPV6ENA;
@@ -506,7 +509,7 @@ static int stmmac_hwtstamp_ioctl(struct net_device *dev, struct ifreq *ifr)
 			config.rx_filter = HWTSTAMP_FILTER_PTP_V2_L4_EVENT;
 			ptp_v2 = PTP_TCR_TSVER2ENA;
 			/* take time stamp for all event messages */
-			snap_type_sel = PTP_TCR_SNAPTYPSEL_1;
+			snap_type_sel = 0xFFFFFFFF & PTP_TCR_SNAPTYPSEL_1;
 
 			ptp_over_ipv4_udp = PTP_TCR_TSIPV4ENA;
 			ptp_over_ipv6_udp = PTP_TCR_TSIPV6ENA;
@@ -540,7 +543,7 @@ static int stmmac_hwtstamp_ioctl(struct net_device *dev, struct ifreq *ifr)
 			config.rx_filter = HWTSTAMP_FILTER_PTP_V2_EVENT;
 			ptp_v2 = PTP_TCR_TSVER2ENA;
 			/* take time stamp for all event messages */
-			snap_type_sel = PTP_TCR_SNAPTYPSEL_1;
+			snap_type_sel = 0xFFFFFFFF & PTP_TCR_SNAPTYPSEL_1;
 
 			ptp_over_ipv4_udp = PTP_TCR_TSIPV4ENA;
 			ptp_over_ipv6_udp = PTP_TCR_TSIPV6ENA;
@@ -1040,6 +1043,22 @@ static int init_dma_desc_rings(struct net_device *dev, gfp_t flags)
 	netif_dbg(priv, probe, priv->dev,
 		  "SKB addresses:\nskb\t\tskb data\tdma data\n");
 
+#ifdef DEV_NETMAP
+	if (stmmac_netmap_rx_init(priv)) {
+		priv->cur_rx = 0;
+		priv->dirty_rx = 1;
+		buf_sz = bfsize;
+
+		if (stmmac_netmap_tx_init(priv)) {
+			priv->dirty_tx = 0;
+			priv->cur_tx = 0;
+			netdev_reset_queue(priv->dev);
+			return 0;
+		}
+	}
+
+#endif /* DEV_NETMAP */
+
 	for (i = 0; i < DMA_RX_SIZE; i++) {
 		struct dma_desc *p;
 		if (priv->extend_desc)
@@ -1308,6 +1327,11 @@ static void stmmac_tx_clean(struct stmmac_priv *priv)
 	unsigned int bytes_compl = 0, pkts_compl = 0;
 	unsigned int entry = priv->dirty_tx;
 
+#ifdef DEV_NETMAP
+	if (netmap_tx_irq(priv->dev, 0))
+		return;
+#endif /* DEV_NETMAP */
+
 	netif_tx_lock(priv->dev);
 
 	priv->xstats.tx_clean++;
@@ -1739,7 +1763,7 @@ static int stmmac_hw_setup(struct net_device *dev, bool init_ptp)
 	}
 
 	if (priv->hw->pcs && priv->hw->mac->pcs_ctrl_ane)
-		priv->hw->mac->pcs_ctrl_ane(priv->hw, 1, priv->hw->ps, 0);
+		priv->hw->mac->pcs_ctrl_ane((void __iomem *)priv->hw, 1, priv->hw->ps, 0);
 
 	/*  set TX ring length */
 	if (priv->hw->dma->set_tx_ring_len)
@@ -2471,6 +2495,11 @@ static int stmmac_rx(struct stmmac_priv *priv, int limit)
 	unsigned int count = 0;
 	int coe = priv->hw->rx_csum;
 
+#ifdef DEV_NETMAP
+	if (netmap_rx_irq(priv->dev, 0, &count))
+		return count;
+#endif /* DEV_NETMAP */
+
 	if (netif_msg_rx_status(priv)) {
 		void *rx_head;
 
@@ -3381,6 +3410,10 @@ int stmmac_dvr_probe(struct device *device,
 		goto error_netdev_register;
 	}
 
+#ifdef DEV_NETMAP
+	stmmac_netmap_attach(priv);
+#endif /* DEV_NETMAP */
+
 	return ret;
 
 error_netdev_register:
@@ -3428,6 +3461,11 @@ int stmmac_dvr_remove(struct device *dev)
 	    priv->hw->pcs != STMMAC_PCS_TBI &&
 	    priv->hw->pcs != STMMAC_PCS_RTBI)
 		stmmac_mdio_unregister(ndev);
+
+#ifdef DEV_NETMAP
+	netmap_detach(ndev);
+#endif /* DEV_NETMAP */
+
 	free_netdev(ndev);
 
 	return 0;
@@ -3625,8 +3663,8 @@ static void __exit stmmac_exit(void)
 #endif
 }
 
-module_init(stmmac_init)
-module_exit(stmmac_exit)
+module_init(stmmac_init);
+module_exit(stmmac_exit);
 
 MODULE_DESCRIPTION("STMMAC 10/100/1000 Ethernet device driver");
 MODULE_AUTHOR("Giuseppe Cavallaro <peppe.cavallaro@st.com>");
